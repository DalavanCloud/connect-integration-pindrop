AWSTemplateFormatVersion: "2010-09-09"
Description: "Pindrop Integration for Amazon Connect Quickstart 1.3, August 2017"
Parameters:
  APIKey:
    Type: String
    Default: "Pindrop API Key"
  PBaseURL:
    Type: String
    Default: "Pindrop Base URL"    
Resources:
  PindropExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                - "logs:PutLogEvents"
                - "lambda:InvokeFunction"
                - "lambda:GetFunctionConfiguration"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  PindropCallStart:
    Type: "AWS::Lambda::Function"
    Properties:
        Handler: "index.handler"
        Runtime: "nodejs6.10"
        FunctionName: "pindrop-call-start"
        Description: "Pindrop Call Start"
        MemorySize: 128
        Timeout: 30
        Role:
          Fn::GetAtt:
            - "PindropExecutionRole"
            - "Arn"
        Environment:
          Variables:
            apiToken: !Ref APIKey
            BaseUrl: !Ref PBaseURL
        Tags:
          -
            Key: "Service"
            Value: "ContactCenter"
        Code:
          ZipFile: |
            const util = require('util');
            var https = require('https');

            exports.handler = (event, context, callback) => {
              console.log("Creating call, invoked with " + util.inspect(event, {showHidden:false, depth:null}));
              var apiToken = process.env['apiToken'];
              var contactId = event.Details.ContactData.ContactId;
              var source = event.Details.ContactData.CustomerEndpoint.Address;
              var destination = event.Details.ContactData.SystemEndpoint.Address;
              var now = new Date().toISOString();

              var req = https.request({
                hostname: process.env['BaseUrl'],
                method: "PUT",
                path: "/v1/interaction/" + contactId + "?event=call_start.",
                headers: {
                  Authorization: "Bearer " + apiToken,
                },
              },
              function(res) {
                console.log("Got response: " + res.statusCode);
                res.on('data', function (chunk) {
                  console.log('BODY: ' + chunk);
                });
                res.on('end', function() {
                  console.log('END');
                  callback(undefined, {});
                });
              }).on('error', function(e) {
                console.log("Got error: " + e.message);
                callback(undefined, {});
              });

              req.on('error', function(e) {
                console.log('problem with request: ' + e.message);
                callback(undefined, {});
              });
              req.write(JSON.stringify({ interaction_id: contactId, source: source, destination: destination, start_utc: now.substring(0, now.length - 1), end_utc: now.substring(0, now.length - 1)}));
              req.end();
            };
  CallStartInvokePermission: 
    Type: "AWS::Lambda::Permission"
    DependsOn: "PindropCallStart"
    Properties: 
      FunctionName: "pindrop-call-start"
      Action: 'lambda:InvokeFunction'
      Principal: 'connect.amazonaws.com'
      SourceAccount:
        Ref: 'AWS::AccountId'             
  PindropFetchCall:
    Type: "AWS::Lambda::Function"
    Properties:
        Handler: "index.handler"
        Runtime: "nodejs6.10"
        FunctionName: "pindrop-fetch-call"
        Description: "Pindrop Fetch Call"
        MemorySize: 128
        Timeout: 30
        Role:
          Fn::GetAtt:
            - "PindropExecutionRole"
            - "Arn"
        Environment:
          Variables:
            apiToken: !Ref APIKey
            BaseUrl: !Ref PBaseURL            
        Tags:
          -
            Key: "Service"
            Value: "ContactCenter"
        Code:
          ZipFile: |
            const util = require('util');
            var https = require('https');

            exports.handler = (event, context, callback) => {
              console.log("Fetching risk score, invoked with " + util.inspect(event, {showHidden: false, depth: null}));

              var apiToken = process.env['apiToken'];
              var contactId = event.Details.ContactData.ContactId;

              https.get({
                hostname: process.env['BaseUrl'],
                path: "/v1/interaction/" + contactId + "/risk",
                headers: {
                  Authorization: "Bearer " + apiToken,
                },
              },
              function(res) {
                var responseStr = '';
                res.on('data', function (chunk) {
                  responseStr = responseStr + chunk;
                });
                res.on('end', function() {
                  console.log('Got status code ' + res.statusCode + ', body ' + responseStr);
                  r = JSON.parse(responseStr);
                  callback(undefined, {'RiskScore': r.data.risk_score, 'IsHighRisk': r.data.is_high_risk, 'RiskReasons': r.data.risk_reasons});
                });
              }).on('error', function(e) {
                console.log("Got error: " + e.message);
                callback(undefined, {});
              });
            };
  FetchCallInvokePermission: 
    Type: "AWS::Lambda::Permission"
    DependsOn: "PindropFetchCall"
    Properties: 
      FunctionName: "pindrop-fetch-call"
      Action: 'lambda:InvokeFunction'
      Principal: 'connect.amazonaws.com'
      SourceAccount:
        Ref: 'AWS::AccountId'
Outputs:
  PindropExecutionRole:
    Description: "Lambda Function Execution Role"
    Value:
      Fn::GetAtt:
        - "PindropExecutionRole"
        - "Arn"
  PindropCallStart:
    Description: "Lambda Function for Pindrop Call Start"
    Value:
      Fn::GetAtt:
        - "PindropCallStart"
        - "Arn"
  PindropFetchCall:
    Description: "Lambda Function for Pindrop Fetch Call"
    Value:
      Fn::GetAtt:
        - "PindropFetchCall"
        - "Arn"
